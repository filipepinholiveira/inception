# define como o servidor Nginx será executado, configura os logs, o suporte para SSL, e a interação com o PHP
# Define o Nginx para rodar com um usuário restrito (www-data).
# Configura o servidor para servir conteúdo HTTPS usando SSL.
# Faz a comunicação com o PHP (via FastCGI) para processar arquivos PHP.
# Garante segurança e otimização, com controle sobre uploads e número de conexões.

user www-data;
# Define que o Nginx será executado como o usuário www-data, o que é uma prática comum para garantir segurança, 
# já que esse usuário tem permissões limitadas.

events {
    worker_connections  1024;
}
# Define que cada processo de trabalho (worker) pode lidar com até 1024 conexões simultâneas.

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # include /etc/nginx/mime.types;: Carrega o arquivo de tipos MIME, que ajuda a Nginx a identificar 
    # o tipo de arquivo a ser enviado para o cliente (HTML, CSS, JS, etc.).
    
    #default_type application/octet-stream;: Define um tipo de arquivo padrão (binário genérico) caso o tipo MIME não seja identificado.

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    # log_format: Define o formato do log de acesso. Ele registra o endereço IP do cliente, a requisição HTTP, o status de resposta, 
    # o número de bytes enviados, o agente de usuário (navegador) e outros detalhes.
    
    # access_log: Especifica onde os logs de acesso serão armazenados, neste caso, no arquivo /var/log/nginx/access.log.

    sendfile        on;
    keepalive_timeout  65;
    client_max_body_size 100m;

    # sendfile on;: Otimiza a transferência de arquivos do servidor para o cliente, utilizando o sistema de arquivos diretamente.
    # keepalive_timeout 65;: Define o tempo máximo (em segundos) que o servidor manterá a conexão ativa sem receber novas requisições.
    # client_max_body_size 100m;: Limita o tamanho máximo de upload do corpo de uma requisição (como uploads de arquivos) para 100 MB.

    include /etc/nginx/conf.d/*.conf;

    server {

        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;

        # listen 443 ssl: Escuta na porta 443, que é a porta padrão para conexões HTTPS. O parâmetro ssl indica que o SSL (TLS) será usado.
        # listen [::]:443 ssl: Configuração similar para suporte a IPv6.

        root /var/www/html;

        index index.php index.html;

        # root /var/www/html;: Define o diretório raiz onde os arquivos do site estão localizados.
        # index index.php index.html;: Define os arquivos que o servidor tentará servir por padrão quando um diretório for acessado 
        # (primeiro index.php, depois index.html).
        
        ssl_protocols TLSv1.2 TLSv1.3;
	    ssl_certificate /etc/nginx/ssl/inception.crt;
        ssl_certificate_key /etc/nginx/ssl/inception.key;

        # ssl_protocols TLSv1.2 TLSv1.3;: Define os protocolos SSL suportados (TLS 1.2 e 1.3).
        # ssl_certificate: O caminho para o certificado SSL (usado para HTTPS).
        # ssl_certificate_key: O caminho para a chave privada correspondente ao certificado SSL.

        server_name fpinho-d.42.fr;

        location / {
            try_files $uri $uri/ /index.php$is_args$args;
        }

        # location /: Esta localização define o comportamento padrão para qualquer URL que não corresponda a uma regra mais específica.
        # try_files $uri $uri/ /index.php$is_args$args;: Tenta encontrar o arquivo solicitado. 
        # Se não for encontrado, redireciona para o index.php, passando quaisquer argumentos de requisição (ex.: variáveis na URL).

        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass wordpress:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        # location ~ \.php$: Define que essa regra se aplica a arquivos .php.
        # try_files $uri =404;: Se o arquivo PHP solicitado não for encontrado, retorna um erro 404.
        # fastcgi_pass wordpress:9000;: Envia requisições PHP para o serviço FastCGI rodando no container do WordPress, na porta 9000.
        # fastcgi_split_path_info: Divide o caminho do arquivo e as informações adicionais no final da URL (ex.: /index.php/something).
        # fastcgi_param: Define variáveis FastCGI, como o caminho do arquivo a ser executado.

    }
}