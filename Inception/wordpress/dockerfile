
FROM debian:bullseye                                        
# indica que a nova imagem Docker será construída sobre a imagem Debian Bullseye

EXPOSE  9000                                                 
# No caso do WordPress, geralmente ele é executado em um servidor web como Nginx ou Apache, 
# que escuta nas portas 80 ou 443, mas pode ser configurado para escutar em outras portas, como 9000.
# Nota Importante: A instrução EXPOSE apenas documenta a porta em que a aplicação está ouvindo; 
# ela não a torna acessível. Para que o tráfego possa realmente chegar a essa porta, 
# você precisará usar a opção -p ou --publish ao iniciar o contêiner, como em docker run -p 9000:9000, 
# que mapeia a porta do contêiner para a porta do host.

ARG	    PHPPATH=/etc/php/7.4/fpm
# A instrução ARG no Dockerfile é usada para definir uma variável de ambiente que pode ser passada durante o tempo de construção da imagem
# ARG é uma instrução que define uma variável que pode ser utilizada durante o processo de construção da imagem Docker. 
# Variáveis definidas com ARG são limitadas ao contexto da construção da imagem e não estão disponíveis em tempo de execução 
# (ou seja, não podem ser acessadas no contêiner em execução).

# PHPPATH é o nome da variável que você está definindo. Você pode usar essa variável em outras partes do seu 
# Dockerfile para referenciar o caminho que ela representa.

# Este é o valor padrão atribuído à variável PHPPATH. 
# O caminho /etc/php/7.4/fpm geralmente se refere à configuração do PHP-FPM (PHP FastCGI Process Manager) 
# para a versão 7.4 do PHP. Esse é o local onde as configurações do PHP-FPM estão armazenadas, 
# como o arquivo php-fpm.conf e outros arquivos de configuração.

RUN		apt update && apt install --no-install-recommends --no-install-suggests -y \
        # isso garante que o sistema tenha a lista mais recente de pacotes e suas versões.
		ca-certificates \
        # # Pacote que fornece certificados de autoridade de certificação (CA) para garantir conexões HTTPS seguras. 
		php7.4-fpm \
        # Instala o PHP FastCGI Process Manager (FPM) para a versão 7.4 do PHP, que é necessário para executar aplicações PHP de maneira eficiente
		php7.4-mysql \
        # Extensão do PHP para permitir a conexão e a interação com bancos de dados MySQL
		wget \
        # Ferramenta de linha de comando para download de arquivos da web.
		tar && \
        # erramenta para manipulação de arquivos compactados, permitindo criar ou extrair arquivos de arquivos .tar.
		rm -rf /var/lib/apt/lists/*

RUN	    service php7.4-fpm stop
        # parar o serviço do PHP FastCGI Process Manager (FPM) da versão 7.4

COPY	conf/www.conf ${PHPPATH}/pool.d/
        # COPY: Este comando copia um arquivo local chamado www.conf da pasta conf (local ao Dockerfile) 
        # para o diretório ${PHPPATH}/pool.d/, onde ${PHPPATH} é uma variável que, no seu caso, é definida como /etc/php/7.4/fpm.
        # Objetivo: O arquivo www.conf é um arquivo de configuração que define o comportamento do PHP-FPM para o pool de processos.

RUN		sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' ${PHPPATH}/php.ini && \
        # Descomenta a linha que controla a configuração cgi.fix_pathinfo, que é importante para a manipulação de URLs em scripts PHP. 
        # A configuração é alterada de 1 (habilitado) para 0 (desabilitado), o que pode ajudar a prevenir problemas de segurança.
        sed -i "s/listen = \/run\/php\/php$PHP_VERSION_ENV-fpm.sock/listen = 9000/g" ${PHPPATH}/pool.d/www.conf && \
        # Altera a configuração do PHP-FPM para escutar na porta 9000 em vez de usar um socket Unix. 
        # Isso pode facilitar a conexão com servidores web (como Nginx ou Apache) que não estão configurados para usar sockets.
        sed -i 's/;listen.mode = 0660/listen.mode = 0660/g' ${PHPPATH}/pool.d/www.conf && \
        # Habilita a configuração listen.mode, que define as permissões do socket ou porta que o PHP-FPM usará. 
        # Neste caso, as permissões são definidas como 0660, permitindo que o usuário e o grupo do processo PHP-FPM leiam e escrevam.
        sed -i 's/;daemonize = yes/daemonize = no/g' ${PHPPATH}/pool.d/www.conf
        # Descomenta a opção daemonize e a define como no, o que significa que o PHP-FPM não será executado como um daemon. 
        # Isso pode ser útil em ambientes de contêiner, onde o processo principal deve ser o processo em primeiro plano.

        # O comando sed é usado para realizar substituições em arquivos de texto.

RUN		wget --no-check-certificate https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
        # wget: É uma ferramenta de linha de comando usada para baixar arquivos da web. 
        # Aqui, é utilizada para baixar o arquivo wp-cli.phar diretamente do repositório oficial do WP-CLI.
        # --no-check-certificate: Essa opção instrui o wget a não verificar o certificado SSL do site. 
        # Isso é útil em ambientes onde os certificados não são verificados ou em situações de teste, 
        # mas pode representar um risco de segurança, pois você não está validando a autenticidade do servidor.
		chmod +x wp-cli.phar && \
        # permite comando executavel diretamente no programa
		mv wp-cli.phar /usr/local/bin/wp
        # Objetivo: Após essa operação, você pode usar o WP-CLI simplesmente digitando wp na linha de comando, 
        # pois /usr/local/bin está geralmente incluído na variável de ambiente PATH.

        # Essa abordagem é comum em Dockerfiles para garantir que ferramentas essenciais, 
        # como o WP-CLI, estejam disponíveis na imagem criada. O WP-CLI é muito útil para gerenciar tarefas no WordPress, 
        # como instalar plugins, atualizar o núcleo, e muito mais, tudo através da linha de comando.

RUN	    mkdir -p /run/php/ && \
        # Usado para armazenar arquivos temporários do PHP, como sockets e arquivos de PID (Process ID).
        mkdir -p /var/run/php/ && \
        # Semelhante ao /run/php/, este diretório é geralmente utilizado para armazenar informações temporárias e de execução do PHP.
        mkdir -p /var/www/inception/
        # Este diretório é frequentemente utilizado como o local raiz onde a aplicação web (neste caso, uma instalação do WordPress) 
        # será armazenada e servida pelo servidor web.
    
RUN	    chown -R www-data:www-data /var/www/inception/
        # chown: Este comando altera o proprietário e o grupo de um arquivo ou diretório.
        
        # -R: A opção -R aplica a alteração de propriedade de forma recursiva, ou seja, todas as subpastas 
        # e arquivos dentro de /var/www/inception/ também terão suas permissões alteradas

        # www-data:www-data: Define o usuário e o grupo como www-data, que é um usuário padrão utilizado 
        # por muitos servidores web, como Apache e Nginx. Este usuário normalmente é responsável por servir arquivos da web.

        # Finalidade: Essas etapas são essenciais na configuração do ambiente dentro do contêiner Docker, 
        #garantindo que a aplicação tenha a estrutura de diretórios correta e as permissões necessárias para operar sem problemas.

COPY	conf/wp-config.php /tmp/

        # O objetivo deste comando é copiar o arquivo wp-config.php, que geralmente contém as configurações 
        # de conexão ao banco de dados e outras configurações específicas do WordPress, para o diretório temporário (/tmp/) na imagem Docker. Essa abordagem pode ser útil para:

        # Preparação: O arquivo pode ser usado posteriormente em comandos ou scripts de configuração durante o processo de construção do contêiner, 
        # como mover para a pasta correta ou renomeá-lo.

        # Organização: Colocar arquivos temporários em /tmp/ é uma prática comum, pois mantém o sistema de arquivos mais organizado 
        # e facilita a limpeza posterior.

        # Segurança: Ao utilizar um diretório temporário, você pode evitar a exposição de arquivos de configuração sensíveis 
        # em diretórios acessíveis publicamente na estrutura do contêiner.

COPY	tools/setup.sh /bin/

RUN		chmod +x /bin/setup.sh

CMD		["setup.sh", "php-fpm7.4", "--nodaemonize"]
        # Este é um comando em formato JSON (array), que executa o script setup.sh passando dois argumentos:

        # php-fpm7.4: O nome do serviço ou processo que deve ser iniciado

        # --nodaemonize: Esta opção normalmente indica que o serviço deve ser executado em primeiro plano, 
        # em vez de ser executado como um daemon (em segundo plano). 
        # Isso é útil em contêineres Docker, pois o Docker precisa de um processo em primeiro plano para manter o contêiner em execução.