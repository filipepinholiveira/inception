

- instalar docker



- instalar docker compose






- instalar mariadb:

    1. Instalando o MariaDB
        Ubuntu/Debian:

        Atualize o repositório de pacotes:
            sudo apt update

        Instale o MariaDB:
            sudo apt install mariadb-server

        Verifique se o MariaDB foi instalado corretamente:
            mariadb --version


    2. Iniciar e habilitar o MariaDB para iniciar automaticamente com o sistema

        Inicie o serviço MariaDB:
            sudo systemctl start mariadb
            apareceu me -> Warning: The unit file, source configuration file or drop-ins of mariadb.service changed on disk. Run 'systemctl daemon-reload' to reload units.
            fiz systemctl daemon-reload

        Habilite o MariaDB para iniciar automaticamente com o sistema:
            sudo systemctl enable mariadb

        Verifique o status do serviço para garantir que está funcionando corretamente:
            sudo systemctl status mariadb

    
    3. Configurar o MariaDB:

        Agora que o MariaDB está instalado e funcionando, é recomendável executar o script de segurança para configurar a senha do usuário root e remover configurações inseguras.

        Execute o script de segurança do MariaDB:
            sudo mysql_secure_installation

            Durante a execução do script, você será solicitado a:

            Configurar a senha do root (recomendado).
            Remover usuários anônimos.
            Desabilitar o login root remotamente.
            Remover o banco de dados de teste (se não for necessário).
            Recarregar as tabelas de privilégios.

            Responda às perguntas conforme necessário, com "Y" para ações de segurança recomendadas.


    4. Acessar o MariaDB

            Agora, você pode acessar o MariaDB como o usuário root:
                sudo mariadb

            Ou, se configurou uma senha para o root no passo anterior:
                sudo mariadb -u root -p



    5. Criar um Banco de Dados e um Usuário

            Agora que você tem acesso ao MariaDB, você pode criar um banco de dados e um usuário com permissões específicas.

            Criar um banco de dados:
                CREATE DATABASE nome_do_banco;

            Criar um usuário e conceder permissões:
                CREATE USER 'nome_usuario'@'localhost' IDENTIFIED BY 'senha_usuario'; ---> MANTER AS PELICAS
                GRANT ALL PRIVILEGES ON nome_do_banco.* TO 'nome_usuario'@'localhost';
                FLUSH PRIVILEGES;

            Verificar se o banco de dados foi criado corretamente:
                SHOW DATABASES;

            Verificar lista de utilizadores:
                SELECT User, Host FROM mysql.user;
                SELECT User, Host, authentication_string, plugin FROM mysql.user;
                

                Resumo de Comandos para Gerenciar Usuários:

                Listar usuários:
                    SELECT User, Host FROM mysql.user;

                Alterar a senha de um usuário:
                    SET PASSWORD FOR 'user1'@'localhost' = PASSWORD('nova_senha');

                Conceder permissões:
                    GRANT ALL PRIVILEGES ON exampledb.* TO 'user1'@'localhost' IDENTIFIED BY 'nova_senha';

                Revogar permissões:
                    REVOKE ALL PRIVILEGES ON exampledb.* FROM 'user1'@'localhost';

                Deletar um usuário:
                    DROP USER 'user1'@'localhost';

                Criar um novo usuário:
                    CREATE USER 'novo_usuario'@'localhost' IDENTIFIED BY 'senha_nova';

                Mostrar permissões de um usuário:
                    SHOW GRANTS FOR 'user1'@'localhost';

                Sempre que realizar alterações como essas, não se esqueça de executar:
                    FLUSH PRIVILEGES;

                Isso garante que as mudanças feitas sejam aplicadas corretamente.


    6. Acessar o banco de dados como o novo usuário

            Você pode acessar o MariaDB como o usuário que acabou de criar:
                mariadb -u nome_usuario -p nome_do_banco



    7. brincar com mariadb


            CRIAR TABELA
            Agora, vamos criar uma tabela dentro do banco de dados empresa. Vamos criar uma tabela simples 
            chamada funcionarios com alguns campos básicos (ID, nome e salário).

            CREATE TABLE funcionarios (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nome VARCHAR(100),
            salario DECIMAL(10, 2)
            );

            Explicação dos tipos de dados:

            INT é usado para armazenar números inteiros.
            AUTO_INCREMENT significa que o valor da coluna será gerado automaticamente pelo MariaDB.
            VARCHAR(100) é uma string de texto com até 100 caracteres.
            DECIMAL(10, 2) é usado para armazenar valores numéricos com precisão decimal (10 dígitos, sendo 2 após a vírgula).



            VISUALIZAR TABELA
            Para visualizar as tabelas no banco de dados atual:
                SHOW TABLES;



            INSERIR DADOS NA TABELA
            Para inserir dados na tabela funcionarios, use o comando INSERT INTO. Por exemplo:
                INSERT INTO funcionarios (nome, salario) 
                VALUES ('João Silva', 3500.00);

            Se você quiser inserir vários registros de uma vez:
                INSERT INTO funcionarios (nome, salario) 
                VALUES ('Maria Oliveira', 4200.50),
                       ('Carlos Santos', 2800.00),
                       ('Ana Costa', 5000.00);


            CONSULTAR DADOS DA TABELA
            Para consultar os dados que você inseriu, use o comando SELECT. Por exemplo, para listar todos os funcionários:
                SELECT * FROM funcionarios;

            Isso vai mostrar todos os registros na tabela funcionarios.

            Para listar apenas determinados campos (por exemplo, apenas o nome e o salário):
                SELECT nome, salario FROM funcionarios;

            

            ATUALIZAR DADOS DA TABELA
            Para atualizar os dados existentes, você pode usar o comando UPDATE. 
            Por exemplo, se você quiser aumentar o salário de um funcionário específico:
                UPDATE funcionarios
                SET salario = 3800.00
                WHERE nome = 'João Silva';


            APAGAR DADOS DA TABELA
            Se você quiser excluir dados, use o comando DELETE. Por exemplo, para excluir o funcionário chamado "Carlos Santos":
                DELETE FROM funcionarios
                WHERE nome = 'Carlos Santos';

            Atenção: O comando DELETE excluirá os dados permanentemente. Se você não usar a cláusula WHERE, todos os dados da tabela serão excluídos.



            ALTERAR ESTRUTURA TAS TABELAS APOS CRIAÇAO
            Você pode modificar a estrutura de uma tabela após ela ter sido criada. Por exemplo, se quiser 
            adicionar uma nova coluna data_admissao à tabela funcionarios:
                ALTER TABLE funcionarios
                ADD COLUMN data_admissao DATE;
                ADD COLUMN idade INT;

            Se você quiser modificar o tipo de dado de uma coluna existente (por exemplo, aumentar o tamanho do nome):
                ALTER TABLE funcionarios
                MODIFY COLUMN nome VARCHAR(255);

            
            APAGAR UMA TABELA
            Se você quiser excluir uma tabela completamente, use o comando DROP TABLE. Isso excluirá a tabela e todos os dados dentro dela.
                DROP TABLE funcionarios;


            COMANDOS UTEIS
                Ver a estrutura de uma tabela: Para ver a estrutura de uma tabela (quais colunas e tipos de dados ela tem), use:
                    DESCRIBE funcionarios;

                Contar o número de registros em uma tabela:
                    SELECT COUNT(*) FROM funcionarios;

                Filtrar resultados com WHERE: Você pode filtrar os resultados da consulta com a cláusula WHERE. 
                Por exemplo, para ver apenas os funcionários com salário superior a 4000:
                    SELECT * FROM funcionarios WHERE salario > 4000;

                Ordenar resultados com ORDER BY: Para ordenar os resultados por uma coluna, use o ORDER BY. 
                Por exemplo, para listar os funcionários por salário em ordem crescente:
                    SELECT * FROM funcionarios ORDER BY salario ASC;
                Para ordem decrescente:
                    SELECT * FROM funcionarios ORDER BY salario DESC;



                Resumo:

                Criar banco de dados: CREATE DATABASE nome_do_banco;
                Criar tabela: CREATE TABLE nome_da_tabela (...);
                Inserir dados: INSERT INTO nome_da_tabela (coluna1, coluna2) VALUES (valor1, valor2);
                Consultar dados: SELECT * FROM nome_da_tabela;
                Atualizar dados: UPDATE nome_da_tabela SET coluna1 = valor1 WHERE condição;
                Deletar dados: DELETE FROM nome_da_tabela WHERE condição;
                Alterar estrutura da tabela: ALTER TABLE nome_da_tabela ADD COLUMN nova_coluna tipo;
                Excluir tabela: DROP TABLE nome_da_tabela;
                Excluir banco de dados: DROP DATABASE nome_do_banco;


        8. Excluir um Banco de Dados (DROP DATABASE)

                Se você quiser excluir um banco de dados inteiro, use o comando DROP DATABASE. 
                Isso removerá o banco de dados e todas as suas tabelas.
                    DROP DATABASE empresa;




-  criar dockerfile para testar mariadb

        Passos para criar uma imagem Docker que execute o MariaDB

            1. Criar o Dockerfile

                Primeiro, você precisa de um arquivo chamado Dockerfile para definir a configuração da sua imagem Docker. 
                Vamos criar um Dockerfile simples que instale o MariaDB e o configure.

                dockerfile:

                # Use a imagem oficial do MariaDB como base
                FROM mariadb:latest

                # Defina variáveis de ambiente (opcional)
                ENV MYSQL_ROOT_PASSWORD=rootpassword
                ENV MYSQL_DATABASE=meubanco
                ENV MYSQL_USER=meuusuario
                ENV MYSQL_PASSWORD=senhausuario

                # Exponha a porta do MariaDB
                EXPOSE 3306

                # Comando para inicializar o MariaDB
                CMD ["mysqld"]


                Explicação do Dockerfile:

                FROM mariadb:latest: Estamos utilizando a imagem oficial do MariaDB no Docker Hub como base. Isso já inclui o MariaDB pré-instalado.

                ENV: As variáveis de ambiente configuram o MariaDB:
                    MYSQL_ROOT_PASSWORD: Define a senha do usuário root.
                    MYSQL_DATABASE: Cria um banco de dados inicial.
                    MYSQL_USER e MYSQL_PASSWORD: Cria um usuário específico com uma senha.

                EXPOSE 3306: A porta 3306 é a porta padrão do MariaDB. Usamos isso para expor a porta do MariaDB 
                no container para que possamos acessá-lo de fora.

                CMD ["mysqld"]: Este é o comando padrão para rodar o MariaDB quando o container for iniciado. 
                Ele pode ser opcional, pois a imagem oficial do MariaDB já o executa por padrão.
            
            
            2. Construir a imagem Docker
            

                Agora que você tem o Dockerfile, o próximo passo é construir a imagem Docker.

                Navegue até o diretório onde o Dockerfile está localizado.

                Execute o seguinte comando para construir a imagem Docker a partir do Dockerfile:
                    docker build -t mariadb-custom .

                    docker run -d --name mariadb-container -p 3306:3306 mariadb:latest
                    Ou
                    docker run -d --name mariadb-container -p 3306:3306 -e MARIADB_ROOT_PASSWORD=vandalose mariadb:latest

                        O motivo:

                        Quando você usa a imagem oficial do MariaDB e especifica uma senha para o root através da variável de ambiente 
                        no comando docker run (por exemplo, -e MARIADB_ROOT_PASSWORD=vandalose), essa variável sobrepõe qualquer valor 
                        definido no Dockerfile. Ou seja, a configuração do Dockerfile é ignorada neste caso, porque a variável foi definida 
                        diretamente na linha de comando.
                        O que acontece no Dockerfile:

                        No seu Dockerfile, quando você define ENV MYSQL_ROOT_PASSWORD=vandalose, isso cria uma variável de ambiente, 
                        mas ela só será aplicada quando a imagem for construída. Porém, a imagem do MariaDB usa uma configuração específica 
                        para o gerenciamento da senha do usuário root e não necessariamente respeita o valor do MYSQL_ROOT_PASSWORD em tempo 
                        de execução, o que causa a necessidade de passar essa variável explicitamente com -e MARIADB_ROOT_PASSWORD.
                        Como funciona na imagem oficial do MariaDB:

                        A imagem oficial do MariaDB tem um script de inicialização (docker-entrypoint.sh) que verifica as variáveis de ambiente na hora de iniciar o banco de dados. Caso você não defina explicitamente a variável MARIADB_ROOT_PASSWORD ao rodar o container, ela pedirá uma senha (ou usará uma senha gerada aleatoriamente, dependendo da configuração).
                        Conclusão:

                            Se você definir MARIADB_ROOT_PASSWORD diretamente na linha de comando do docker run, ela substituirá qualquer valor definido no Dockerfile ou em outras fontes.
                            Se você quiser que a variável de ambiente definida no Dockerfile seja usada sem sobreposição, você pode não definir a variável no docker run. Ou seja, pode simplesmente rodar o container com:

                    --> para errros: docker logs mariadb-container

                    -t mariadb-custom: O parâmetro -t é usado para dar um nome à sua imagem. 
                    Aqui estamos nomeando nossa imagem como mariadb-custom.
                    O ponto final (.) indica que o Dockerfile está no diretório atual.
            
            
            
            3. Rodar o container a partir da imagem criada

                Depois de construir a imagem, você pode rodar um container com MariaDB da seguinte maneira:
                    docker exec -it mariadb-container mariadb -u root -p















